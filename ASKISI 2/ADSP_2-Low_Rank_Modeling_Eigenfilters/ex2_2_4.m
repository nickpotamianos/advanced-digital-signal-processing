% Demo σύγκλισης ως προς K = 10, 50, 100
clear; clc; close all;

% -------------------------------------------------------------------------
% 1) Φόρτωση προσυνυπολογισμένων υλοποιήσεων U(n)
%    U έχει διαστάσεις [M × 100]·  θεωρούμε M = 10000, K_max = 100
% -------------------------------------------------------------------------
load('U.mat');                      
[M, K_max] = size(U);

% -------------------------------------------------------------------------
% 2) Παράμετροι προσομοίωσης
% -------------------------------------------------------------------------
Klist      = [10 50 100];   % αριθμοί υλοποιήσεων που θα εξετάσουμε
f0         = 1/1000;        % θεμελιώδης συχνότητα τόνου
sigma2_w   = 0.1;           % διασπορά λευκού θορύβου

% -------------------------------------------------------------------------
% 3) Σύνθεση K_max υλοποιήσεων του X(n) (θα υποδειγματοληφθούν υποσύνολα)
% -------------------------------------------------------------------------
n        = (0:M-1)';                               % [M×1] δείκτης χρόνου
phi_full = 2*pi*rand(1, K_max);                    % [1×K_max] τυχαίες φάσεις
W_full   = sqrt(sigma2_w)*randn(M, K_max);         % [M×K_max] λευκός θόρυβος
X_full   = sin( 2*pi*f0*n*ones(1,K_max) ...
            +   ones(M,1).*phi_full ) + W_full;    % [M×K_max]

% -------------------------------------------------------------------------
% 4) Βρόχος πάνω στα K = 10, 50, 100
% -------------------------------------------------------------------------
for K = Klist
    
    % --- 4.1 Υποσύνολα U και X με K υλοποιήσεις --------------------------
    Usub = U(:,1:K);          % [M×K]
    Xsub = X_full(:,1:K);     % [M×K]
    
    % --- 4.2 Εκτίμηση μητρώου συνδιασπορών C_UU --------------------------
    mu_U = mean(Usub, 2);                 % [M×1]
    Uc   = Usub - mu_U;                   % [M×K]
    C_UU = (Uc * Uc.') / (K - 1);         % [M×M]
    
    % --- 4.3 Ιδιοανάλυση και ιδιοφίλτρο h -------------------------------
    [V, D]   = eig(C_UU);
    [lam,ix] = sort(diag(D), 'descend');
    h        = V(:, ix(1));               % [M×1] κύριο ιδιοδιάνυσμα
    
    % --- 4.4 Φιλτράρισμα κάθε υλοποίησης X(:,k) --------------------------
    Y = filter(h, 1, Xsub);               % [M×K]
    
    % --- 4.5 Mετρικές σύγκλισης ------------------------------------------
    lambda_max   = lam(1);
    offdiag_mask = tril(true(M), -1);      % μάσκα εκτός διαγωνίου
    off_diag_var = var( C_UU(offdiag_mask) );
    
    %   SNR εισόδου (θεωρητική τιμή με βάση var(sin) = 0.5)
    S     = sin(2*pi*f0*n);                % [M×1] καθαρός τόνος
    SNR_in  = var(S,1) / sigma2_w;         % ≈ 0.5 / 0.1 = 5
    
    %   SNR εξόδου: σύγκριση Y με ιδανικό τόνο (broadcast με repmat)
    Noise     = Y - repmat(S, 1, K);       % [M×K] υπολειπόμενος θόρυβος
    SNR_out   = var(S,1) / var(Noise(:),1);
    
    % --- 4.6 Εμφάνιση αποτελεσμάτων --------------------------------------
    fprintf('K = %3d  |  λ_max = %.3f  |  Var(offdiag) = %.4e  | ', ...
             K, lambda_max, off_diag_var);
    fprintf('SNR_in = %.2f dB  |  SNR_out = %.2f dB\n', ...
             10*log10(SNR_in), 10*log10(SNR_out));
end
